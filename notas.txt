- git rm --cached nombre_archivo.extencion -> se usa cuando por ejm hacemos un add de un archivo y cuando esta en verde queremos sacarlo de los adds- 

- git config --list (configuracion por defecto)
- git config --list --show-origin (ver donde estan las configuraciones guardadas)
- git config --global user.name (configuracion del usuario de git)
- git config --global user.email (configuracion del email de git)

- git log nombre_archivo.extension (muestra el historico del archivo)

- git show archivo.extension (cambios que han existido en un archivo)

- git commit (sin mensaje, escribimos el mensaje, y para salir del vim, apretamos Esc + shift + z + z)
para escribir texto en vim, presionamos Esc + i

- Si queremos agregar comentarios en VIM, la primera linea seria el titulo y si das doble enter, el resto seria la descripcion de ese commit, y las lineas con # son comentarios, y no se pueden enviar commits vacios de mensajes

- git diff (para ver las diferencias entre un cmabio y otro, para esto hay q copiar los hash que te salen cuando haces un git log al lado de la palabra commit. Se compara entre versiones, por ende debes ingresar dos hash o codigos de commit para poder compararlos, ejm git diff 9014c67cd2587fe530ba1948887fd454144786e4 d90c2a4df958f3c960773ebd77060e26368d8a81, donde el primer hash es el ultimo cambio y el segundo hash fue el primer commit para este archivo, si cambias el orden y colocas el hash mas viejo de primero y el hash mas reciente de ultimo, cambia la manera en q se muestran los cambios, y te va mostrar en verde los cambios mas recientes y en rojo lo q estaba antes en el commit viejo )

- Branches:
    * git reset, volvemos a una version anterior
        + git reset id_del_commit --soft ó --hard 
            ~ soft (volvemos al estado del commit, pero si hay algo en el staging sigue ahi, es decir, si se hizo un cmabio y se hizo git add,e ste no se elimina).
            ~ hard (todo vuelve al estado que tenia el commit)
        + git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

    * para ver el archivo como estaba en un commit especifico, solo hacemos un git checkout id_commit _nombre_archivo
        + git checkout d90c2a4df958f3c960773ebd77060e26368d8a81 historia.txt.
        + si no guardamos o si no hacemos un add, para volver a la version que esta en master, es decir la ultima guardada y mergeada con master, volvemos a como estaba.
        + git checkout master historia.txt
        + se puede ir hasta una version especifica, hacer cambios y luego hacer un add + commit y se guarada una nueva version de los archivos que se toquen, pero hay q tener cuidado con esto.
    
- git rm: Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.
    * git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
    * git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

- git reset: Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

- git commit -am "mensaje", haces un git add y git commit a la vez, pero para hacerlo ya debiste haber hecho add de este archivo anteriormente.

- merge:
    - desde el master, hacemos un git merge rama_a_mergear 
